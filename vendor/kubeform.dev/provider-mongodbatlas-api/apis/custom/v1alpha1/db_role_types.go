/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type DbRole struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DbRoleSpec   `json:"spec,omitempty"`
	Status            DbRoleStatus `json:"status,omitempty"`
}

type DbRoleSpecActionsResources struct {
	// +optional
	Cluster *bool `json:"cluster,omitempty" tf:"cluster"`
	// +optional
	CollectionName *string `json:"collectionName,omitempty" tf:"collection_name"`
	// +optional
	DatabaseName *string `json:"databaseName,omitempty" tf:"database_name"`
}

type DbRoleSpecActions struct {
	Action    *string                      `json:"action" tf:"action"`
	Resources []DbRoleSpecActionsResources `json:"resources" tf:"resources"`
}

type DbRoleSpecInheritedRoles struct {
	DatabaseName *string `json:"databaseName" tf:"database_name"`
	RoleName     *string `json:"roleName" tf:"role_name"`
}

type DbRoleSpec struct {
	State *DbRoleSpecResource `json:"state,omitempty" tf:"-"`

	Resource DbRoleSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type DbRoleSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	Actions []DbRoleSpecActions `json:"actions,omitempty" tf:"actions"`
	// +optional
	InheritedRoles []DbRoleSpecInheritedRoles `json:"inheritedRoles,omitempty" tf:"inherited_roles"`
	ProjectID      *string                    `json:"projectID" tf:"project_id"`
	RoleName       *string                    `json:"roleName" tf:"role_name"`
}

type DbRoleStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// DbRoleList is a list of DbRoles
type DbRoleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of DbRole CRD objects
	Items []DbRole `json:"items,omitempty"`
}
