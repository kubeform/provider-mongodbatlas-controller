/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Lake struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LakeSpec   `json:"spec,omitempty"`
	Status            LakeStatus `json:"status,omitempty"`
}

type LakeSpecAws struct {
	// +optional
	ExternalID *string `json:"externalID,omitempty" tf:"external_id"`
	// +optional
	IamAssumedRoleArn *string `json:"iamAssumedRoleArn,omitempty" tf:"iam_assumed_role_arn"`
	// +optional
	IamUserArn   *string `json:"iamUserArn,omitempty" tf:"iam_user_arn"`
	RoleID       *string `json:"roleID" tf:"role_id"`
	TestS3Bucket *string `json:"testS3Bucket" tf:"test_s3_bucket"`
}

type LakeSpecDataProcessRegion struct {
	CloudProvider *string `json:"cloudProvider" tf:"cloud_provider"`
	Region        *string `json:"region" tf:"region"`
}

type LakeSpecStorageDatabasesCollectionsDataSources struct {
	// +optional
	DefaultFormat *string `json:"defaultFormat,omitempty" tf:"default_format"`
	// +optional
	Path *string `json:"path,omitempty" tf:"path"`
	// +optional
	StoreName *string `json:"storeName,omitempty" tf:"store_name"`
}

type LakeSpecStorageDatabasesCollections struct {
	// +optional
	DataSources []LakeSpecStorageDatabasesCollectionsDataSources `json:"dataSources,omitempty" tf:"data_sources"`
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
}

type LakeSpecStorageDatabasesViews struct {
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// +optional
	Pipeline *string `json:"pipeline,omitempty" tf:"pipeline"`
	// +optional
	Source *string `json:"source,omitempty" tf:"source"`
}

type LakeSpecStorageDatabases struct {
	// +optional
	Collections []LakeSpecStorageDatabasesCollections `json:"collections,omitempty" tf:"collections"`
	// +optional
	MaxWildcardCollections *int64 `json:"maxWildcardCollections,omitempty" tf:"max_wildcard_collections"`
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// +optional
	Views []LakeSpecStorageDatabasesViews `json:"views,omitempty" tf:"views"`
}

type LakeSpecStorageStores struct {
	// +optional
	AdditionalStorageClasses []string `json:"additionalStorageClasses,omitempty" tf:"additional_storage_classes"`
	// +optional
	Bucket *string `json:"bucket,omitempty" tf:"bucket"`
	// +optional
	Delimiter *string `json:"delimiter,omitempty" tf:"delimiter"`
	// +optional
	IncludeTags *bool `json:"includeTags,omitempty" tf:"include_tags"`
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// +optional
	Prefix *string `json:"prefix,omitempty" tf:"prefix"`
	// +optional
	Provider *string `json:"provider,omitempty" tf:"provider"`
	// +optional
	Region *string `json:"region,omitempty" tf:"region"`
}

type LakeSpec struct {
	State *LakeSpecResource `json:"state,omitempty" tf:"-"`

	Resource LakeSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type LakeSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	Aws *LakeSpecAws `json:"aws" tf:"aws"`
	// +optional
	DataProcessRegion *LakeSpecDataProcessRegion `json:"dataProcessRegion,omitempty" tf:"data_process_region"`
	// +optional
	Hostnames []string `json:"hostnames,omitempty" tf:"hostnames"`
	Name      *string  `json:"name" tf:"name"`
	ProjectID *string  `json:"projectID" tf:"project_id"`
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
	// +optional
	StorageDatabases []LakeSpecStorageDatabases `json:"storageDatabases,omitempty" tf:"storage_databases"`
	// +optional
	StorageStores []LakeSpecStorageStores `json:"storageStores,omitempty" tf:"storage_stores"`
}

type LakeStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// LakeList is a list of Lakes
type LakeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Lake CRD objects
	Items []Lake `json:"items,omitempty"`
}
