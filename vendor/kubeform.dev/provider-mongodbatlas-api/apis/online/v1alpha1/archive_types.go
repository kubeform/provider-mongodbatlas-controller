/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Archive struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ArchiveSpec   `json:"spec,omitempty"`
	Status            ArchiveStatus `json:"status,omitempty"`
}

type ArchiveSpecCriteria struct {
	// +optional
	DateField *string `json:"dateField,omitempty" tf:"date_field"`
	// +optional
	DateFormat *string `json:"dateFormat,omitempty" tf:"date_format"`
	// +optional
	ExpireAfterDays *int64 `json:"expireAfterDays,omitempty" tf:"expire_after_days"`
	// +optional
	Query *string `json:"query,omitempty" tf:"query"`
	Type  *string `json:"type" tf:"type"`
}

type ArchiveSpecPartitionFields struct {
	FieldName *string `json:"fieldName" tf:"field_name"`
	// +optional
	FieldType *string `json:"fieldType,omitempty" tf:"field_type"`
	Order     *int64  `json:"order" tf:"order"`
}

type ArchiveSpec struct {
	State *ArchiveSpecResource `json:"state,omitempty" tf:"-"`

	Resource ArchiveSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type ArchiveSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	ArchiveID   *string              `json:"archiveID,omitempty" tf:"archive_id"`
	ClusterName *string              `json:"clusterName" tf:"cluster_name"`
	CollName    *string              `json:"collName" tf:"coll_name"`
	Criteria    *ArchiveSpecCriteria `json:"criteria" tf:"criteria"`
	DbName      *string              `json:"dbName" tf:"db_name"`
	// +optional
	PartitionFields []ArchiveSpecPartitionFields `json:"partitionFields,omitempty" tf:"partition_fields"`
	// +optional
	Paused    *bool   `json:"paused,omitempty" tf:"paused"`
	ProjectID *string `json:"projectID" tf:"project_id"`
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
	// +optional
	SyncCreation *bool `json:"syncCreation,omitempty" tf:"sync_creation"`
}

type ArchiveStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ArchiveList is a list of Archives
type ArchiveList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Archive CRD objects
	Items []Archive `json:"items,omitempty"`
}
