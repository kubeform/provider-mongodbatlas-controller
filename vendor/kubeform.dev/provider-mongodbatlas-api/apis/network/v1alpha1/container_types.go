/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Container struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ContainerSpec   `json:"spec,omitempty"`
	Status            ContainerStatus `json:"status,omitempty"`
}

type ContainerSpec struct {
	State *ContainerSpecResource `json:"state,omitempty" tf:"-"`

	Resource ContainerSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type ContainerSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	AtlasCIDRBlock *string `json:"atlasCIDRBlock" tf:"atlas_cidr_block"`
	// +optional
	AzureSubscriptionID *string `json:"azureSubscriptionID,omitempty" tf:"azure_subscription_id"`
	// +optional
	ContainerID *string `json:"containerID,omitempty" tf:"container_id"`
	// +optional
	GcpProjectID *string `json:"gcpProjectID,omitempty" tf:"gcp_project_id"`
	// +optional
	NetworkName *string `json:"networkName,omitempty" tf:"network_name"`
	ProjectID   *string `json:"projectID" tf:"project_id"`
	// +optional
	ProviderName *string `json:"providerName,omitempty" tf:"provider_name"`
	// +optional
	Provisioned *bool `json:"provisioned,omitempty" tf:"provisioned"`
	// +optional
	Region *string `json:"region,omitempty" tf:"region"`
	// +optional
	RegionName *string `json:"regionName,omitempty" tf:"region_name"`
	// +optional
	Regions []string `json:"regions,omitempty" tf:"regions"`
	// +optional
	VnetName *string `json:"vnetName,omitempty" tf:"vnet_name"`
	// +optional
	VpcID *string `json:"vpcID,omitempty" tf:"vpc_id"`
}

type ContainerStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ContainerList is a list of Containers
type ContainerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Container CRD objects
	Items []Container `json:"items,omitempty"`
}
