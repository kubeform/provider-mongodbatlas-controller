/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Trigger struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TriggerSpec   `json:"spec,omitempty"`
	Status            TriggerStatus `json:"status,omitempty"`
}

type TriggerSpecEventProcessorsAwsEventbridge struct {
	// +optional
	ConfigAccountID *string `json:"configAccountID,omitempty" tf:"config_account_id"`
	// +optional
	ConfigRegion *string `json:"configRegion,omitempty" tf:"config_region"`
}

type TriggerSpecEventProcessors struct {
	// +optional
	AwsEventbridge *TriggerSpecEventProcessorsAwsEventbridge `json:"awsEventbridge,omitempty" tf:"aws_eventbridge"`
}

type TriggerSpec struct {
	State *TriggerSpecResource `json:"state,omitempty" tf:"-"`

	Resource TriggerSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type TriggerSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	AppID *string `json:"appID" tf:"app_id"`
	// +optional
	ConfigCollection *string `json:"configCollection,omitempty" tf:"config_collection"`
	// +optional
	ConfigDatabase *string `json:"configDatabase,omitempty" tf:"config_database"`
	// +optional
	ConfigFullDocument *bool `json:"configFullDocument,omitempty" tf:"config_full_document"`
	// +optional
	ConfigFullDocumentBefore *bool `json:"configFullDocumentBefore,omitempty" tf:"config_full_document_before"`
	// +optional
	ConfigMatch *string `json:"configMatch,omitempty" tf:"config_match"`
	// +optional
	ConfigOperationType *string `json:"configOperationType,omitempty" tf:"config_operation_type"`
	// +optional
	ConfigOperationTypes []string `json:"configOperationTypes,omitempty" tf:"config_operation_types"`
	// +optional
	ConfigProject *string `json:"configProject,omitempty" tf:"config_project"`
	// +optional
	ConfigProviders []string `json:"configProviders,omitempty" tf:"config_providers"`
	// +optional
	ConfigSchedule *string `json:"configSchedule,omitempty" tf:"config_schedule"`
	// +optional
	ConfigScheduleType *string `json:"configScheduleType,omitempty" tf:"config_schedule_type"`
	// +optional
	ConfigServiceID *string `json:"configServiceID,omitempty" tf:"config_service_id"`
	// +optional
	Disabled *bool `json:"disabled,omitempty" tf:"disabled"`
	// +optional
	EventProcessors *TriggerSpecEventProcessors `json:"eventProcessors,omitempty" tf:"event_processors"`
	// +optional
	FunctionID *string `json:"functionID,omitempty" tf:"function_id"`
	// +optional
	FunctionName *string `json:"functionName,omitempty" tf:"function_name"`
	Name         *string `json:"name" tf:"name"`
	ProjectID    *string `json:"projectID" tf:"project_id"`
	// +optional
	TriggerID *string `json:"triggerID,omitempty" tf:"trigger_id"`
	Type      *string `json:"type" tf:"type"`
}

type TriggerStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// TriggerList is a list of Triggers
type TriggerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Trigger CRD objects
	Items []Trigger `json:"items,omitempty"`
}
