/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Configuration struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ConfigurationSpec   `json:"spec,omitempty"`
	Status            ConfigurationStatus `json:"status,omitempty"`
}

type ConfigurationSpecUserToDnMapping struct {
	// +optional
	LdapQuery *string `json:"ldapQuery,omitempty" tf:"ldap_query"`
	// +optional
	Match *string `json:"match,omitempty" tf:"match"`
	// +optional
	Substitution *string `json:"substitution,omitempty" tf:"substitution"`
}

type ConfigurationSpec struct {
	State *ConfigurationSpecResource `json:"state,omitempty" tf:"-"`

	Resource ConfigurationSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	SecretRef *core.LocalObjectReference `json:"secretRef,omitempty" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type ConfigurationSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	AuthenticationEnabled *bool `json:"authenticationEnabled" tf:"authentication_enabled"`
	// +optional
	AuthorizationEnabled *bool `json:"authorizationEnabled,omitempty" tf:"authorization_enabled"`
	// +optional
	AuthzQueryTemplate *string `json:"authzQueryTemplate,omitempty" tf:"authz_query_template"`
	BindPassword       *string `json:"-" sensitive:"true" tf:"bind_password"`
	BindUsername       *string `json:"bindUsername" tf:"bind_username"`
	// +optional
	CaCertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate"`
	Hostname      *string `json:"hostname" tf:"hostname"`
	// +optional
	Port      *int64  `json:"port,omitempty" tf:"port"`
	ProjectID *string `json:"projectID" tf:"project_id"`
	// +optional
	UserToDnMapping []ConfigurationSpecUserToDnMapping `json:"userToDnMapping,omitempty" tf:"user_to_dn_mapping"`
}

type ConfigurationStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ConfigurationList is a list of Configurations
type ConfigurationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Configuration CRD objects
	Items []Configuration `json:"items,omitempty"`
}
